[{"/home/niemand/Python/massiliarp/frontend/src/index.tsx":"1","/home/niemand/Python/massiliarp/frontend/src/App.tsx":"2","/home/niemand/Python/massiliarp/frontend/src/components/Home.tsx":"3","/home/niemand/Python/massiliarp/frontend/src/components/Units.tsx":"4","/home/niemand/Python/massiliarp/frontend/src/components/Login.tsx":"5","/home/niemand/Python/massiliarp/frontend/src/components/Navbar.tsx":"6","/home/niemand/Python/massiliarp/frontend/src/components/Population.tsx":"7","/home/niemand/Python/massiliarp/frontend/src/components/Events.tsx":"8","/home/niemand/Python/massiliarp/frontend/src/components/Buildings.tsx":"9","/home/niemand/Python/massiliarp/frontend/src/components/BalanceSheetPresenter.tsx":"10"},{"size":228,"mtime":1633624901725,"results":"11","hashOfConfig":"12"},{"size":1942,"mtime":1634295500390,"results":"13","hashOfConfig":"12"},{"size":1610,"mtime":1634498549213,"results":"14","hashOfConfig":"12"},{"size":8554,"mtime":1634131987385,"results":"15","hashOfConfig":"12"},{"size":2386,"mtime":1634068982861,"results":"16","hashOfConfig":"12"},{"size":3963,"mtime":1634122678426,"results":"17","hashOfConfig":"12"},{"size":5001,"mtime":1634141465389,"results":"18","hashOfConfig":"12"},{"size":6743,"mtime":1634326081724,"results":"19","hashOfConfig":"12"},{"size":8753,"mtime":1634328534832,"results":"20","hashOfConfig":"12"},{"size":4325,"mtime":1634499920218,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"118hqpj",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/niemand/Python/massiliarp/frontend/src/index.tsx",[],["50","51"],"/home/niemand/Python/massiliarp/frontend/src/App.tsx",["52"],"import { useState, useEffect } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport Cookies from 'universal-cookie/es6'\n\n// Components\nimport Login from './components/Login'\nimport Home from './components/Home'\nimport Units from './components/Units'\nimport Population from './components/Population'\nimport Events from './components/Events'\nimport Buildings from './components/Buildings'\n\nexport const BACKEND_URL = 'http://localhost:8000'\n\nconst cookies = new Cookies()\n\nconst App = () => {\n  //State\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n\n  useEffect(() => {\n    getSession()\n  })\n\n  const getSession = () => {\n    fetch(BACKEND_URL + '/api-auth/session/', {\n      credentials: 'same-origin',\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data.isAuthenticated) {\n        setIsAuthenticated(true)\n      } else {\n        setIsAuthenticated(false)\n      }\n    })\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" render={() => (\n        <Login cookies={cookies} />\n      )} exact />\n      <Route path=\"/home\" render={() => (\n        <Home cookies={cookies} setIsAuthenticated={(auth: boolean) => { setIsAuthenticated(auth) }} />\n      )} exact />\n      <Route path=\"/units\" render={() => (\n        <Units cookies={cookies} setIsAuthenticated={(auth: boolean) => { setIsAuthenticated(auth) }} />\n      )} exact />\n      <Route path=\"/population\" render={() => (\n        <Population cookies={cookies} setIsAuthenticated={(auth: boolean) => { setIsAuthenticated(auth) }} />\n      )} exact />\n      <Route path=\"/events\" render={() => (\n        <Events cookies={cookies} setIsAuthenticated={(auth: boolean) => { setIsAuthenticated(auth) }} />\n      )} exact />\n      <Route path=\"/buildings\" render={() => (\n        <Buildings cookies={cookies} setIsAuthenticated={(auth: boolean) => { setIsAuthenticated(auth) }} />\n      )} exact />\n    </Switch>\n  )\n}\n\nexport default App\n","/home/niemand/Python/massiliarp/frontend/src/components/Home.tsx",["53"],"import { FC, useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Cookies from 'universal-cookie/es6'\nimport { BACKEND_URL } from '../App'\n\n// Components\nimport Navbar from './Navbar'\nimport BalanceSheetPresenter from './BalanceSheetPresenter'\n\ninterface Props {\n    cookies: Cookies\n    setIsAuthenticated: Function\n}\n\nexport interface BalanceSheet {\n    year: number\n    taxation: number\n    trade: number\n    polis_tributes: number\n    miscellaneous?: number\n    army_upkeep?: number\n    navy_upkeep?: number\n    garrison_upkeep: number\n    infrastructure_maintenance?: number\n    total_income?: number\n    total_expenses?: number\n    new_balance?: number\n    archived: boolean\n    settings?: number\n}\n\nconst Home:FC<Props> = ({ cookies, setIsAuthenticated }) => {\n    // State\n    const [latest, setLatest] = useState<BalanceSheet>()\n\n    const axiosConfig = {\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': cookies.get('csrftoken'),\n        },\n        withCredentials: true,\n    }\n\n    useEffect(() => {\n        // Get the latest balance sheet\n        axios.get(BACKEND_URL + '/api/latest-balance-sheet/', axiosConfig)\n        .then(response => {\n            setLatest(response.data)\n        })\n        .catch(err => {\n            console.log(err)\n        })\n    }, [])\n\n    return (\n        <>\n            <Navbar exclude={'home'} cookies={cookies} setIsAuthenticated={setIsAuthenticated} />\n            {latest !== undefined &&\n            <BalanceSheetPresenter sheet={latest} cookies={cookies} />}\n        </>\n    )\n}\n\nexport default Home\n","/home/niemand/Python/massiliarp/frontend/src/components/Units.tsx",["54","55"],"import React, { FC, useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Cookies from 'universal-cookie/es6'\nimport { BACKEND_URL } from '../App'\n\n// Components\nimport Navbar from './Navbar'\n\ninterface Props {\n    cookies: Cookies\n    setIsAuthenticated: Function\n}\n\ninterface Unit {\n    name: string\n    recruitment_cost: number\n    upkeep_cost: number\n    units_recruited: number\n    settings: number\n}\n\ninterface ArmyUnit extends Unit {\n    raised: boolean\n}\n\ninterface NavyUnit extends Unit {\n\n}\n\nconst Units: FC<Props> = ({ cookies, setIsAuthenticated }) => {\n    // State\n    const [army, setArmy] = useState<ArmyUnit[]>([])\n    const [navy, setNavy] = useState<NavyUnit[]>([])\n\n    const axiosConfig = {\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': cookies.get('csrftoken'),\n        },\n        withCredentials: true,\n    }\n\n    // Get the army units\n    useEffect(() => {\n        axios.get<ArmyUnit[]>(BACKEND_URL + '/api/army-unit/', axiosConfig)\n        .then(response => {\n            setArmy(response.data)\n        })\n    }, [])\n\n\n    // Get the navy's ships\n    useEffect(() => {\n        axios.get<NavyUnit[]>(BACKEND_URL + '/api/navy-unit/', axiosConfig)\n        .then(response => {\n            setNavy(response.data)\n        })\n    }, [])\n\n    const isResponseOk = (response: any) => {\n        if (response.status < 200 && response.status > 299) {\n            throw Error(response.statusText)\n        }\n        return true\n    }\n\n    const handleRaisedChange = (event: React.MouseEvent<HTMLInputElement>, unit: ArmyUnit) => {\n        unit.raised = !unit.raised\n\n        // Make a shallow copy of the army list\n        let armyCopy = [...army]\n\n        // Find the relevant unit\n        let unitCopy = armyCopy.find(u => u.name === unit.name)\n        if (unitCopy !== undefined) {\n            // Alter the unit\n            const index = armyCopy.indexOf(unitCopy)\n            unitCopy.raised = unit.raised\n            armyCopy[index] = unitCopy\n            setArmy(armyCopy)\n        }\n        \n        // Put data to backend server\n        axios.put(BACKEND_URL + '/api/army-unit/' + unit.name + '/', unit, axiosConfig)\n        .then(resp => isResponseOk(resp))\n    }\n\n    const onArmyUnitBtnClick = (event: React.MouseEvent<HTMLImageElement>, unit: ArmyUnit, isAddition: boolean) => {\n        event.preventDefault()\n\n        // Make a shallow copy of the army list\n        let armyCopy = [...army]\n\n        // Find the relevant unit\n        let unitCopy = armyCopy.find(u => u.name === unit.name)\n        if (unitCopy !== undefined) {\n            // Alter the unit\n            const index = armyCopy.indexOf(unitCopy)\n            unitCopy.units_recruited += isAddition ? 1 : -1\n            armyCopy[index] = unitCopy\n            setArmy(armyCopy)\n        }\n\n        // Inform the backend server about the changes\n        axios.put(BACKEND_URL + '/api/army-unit/' + unit.name + '/', unit, axiosConfig)\n        .then(resp => isResponseOk(resp))\n    }\n\n    const onNavyUnitBtnClick = (event: React.MouseEvent<HTMLImageElement>, unit: NavyUnit, isAddition: boolean) => {\n        event.preventDefault()\n\n        // Same process as the for the army\n        // Check the function above\n        let navyCopy = [...navy]\n        let unitCopy = navyCopy.find(u => u.name === unit.name)\n        if (unitCopy !== undefined) {\n            const index = navyCopy.indexOf(unitCopy)\n            unitCopy.units_recruited += isAddition ? 1 : -1\n            navyCopy[index] = unitCopy\n            setNavy(navyCopy)\n        }\n\n        axios.put(BACKEND_URL + '/api/navy-unit/' + unit.name + '/', unit, axiosConfig)\n        .then(resp => isResponseOk(resp))\n    }\n\n    const onArmyUnitNumberChange = (event: React.ChangeEvent<HTMLInputElement>, unit: ArmyUnit) => {\n        event.preventDefault()\n\n        // Make sure the given value can be safely parsed to number\n        const newValue = event.target.value\n        if (typeof newValue === 'string' && !isNaN(Number(newValue)) && newValue !== '') {\n            unit.units_recruited = parseInt(newValue)\n\n            // Shallow copy\n            let armyCopy = [...army]\n\n            // Find the unit in question\n            let unitCopy = armyCopy.find(u => u.name === unit.name)\n            if (unitCopy !== undefined) {\n                const index = armyCopy.indexOf(unitCopy)\n                unitCopy.units_recruited = unit.units_recruited\n                armyCopy[index] = unitCopy\n                setArmy(armyCopy)\n\n                axios.put(BACKEND_URL + '/api/army-unit/' + unitCopy.name + '/', unitCopy, axiosConfig)\n                .then(resp => isResponseOk(resp))\n            }\n        }\n    }\n\n    const onNavyUnitNumberChange = (event: React.ChangeEvent<HTMLInputElement>, unit: NavyUnit) => {\n        event.preventDefault()\n\n        // Make sure the given value can be safely parsed to number\n        const newValue = event.target.value\n        if (typeof newValue === 'string' && !isNaN(Number(newValue)) && newValue !== '') {\n            unit.units_recruited = parseInt(newValue)\n\n            // Shallow copy\n            let navyCopy = [...navy]\n\n            // Find the unit in question\n            let unitCopy = navyCopy.find(u => u.name === unit.name)\n            if (unitCopy !== undefined) {\n                const index = navyCopy.indexOf(unitCopy)\n                unitCopy.units_recruited = unit.units_recruited\n                navyCopy[index] = unitCopy\n                setNavy(navyCopy)\n\n                axios.put(BACKEND_URL + '/api/navy-unit/' + unitCopy.name + '/', unitCopy, axiosConfig)\n                .then(resp => isResponseOk(resp))\n            }\n        }\n    }\n\n    return (\n        <>\n            <Navbar exclude={'units'} cookies={cookies} setIsAuthenticated={setIsAuthenticated} />\n            <div className=\"flex flex-wrap justify-around\">\n                {/* Army units */}\n                <div className=\"flex flex-col\">\n                    <h1><u>Army</u></h1>\n                    {army.map((unit: ArmyUnit) => (\n                        <div key={unit.name} className=\"flex flex-wrap\">\n                            <input type=\"checkbox\" className=\"cursor-pointer\" defaultChecked={unit.raised} onClick={e => {handleRaisedChange(e, unit)}} />\n                            <h2>{unit.name}</h2>\n                            <div>\n                                price: {Math.ceil(unit.recruitment_cost * unit.units_recruited)} <br />\n                                upkeep: {unit.raised ? Math.ceil(unit.upkeep_cost * unit.units_recruited) : 0}\n                            </div>\n                            <img src={process.env.PUBLIC_URL + '/static/minus.ico'} alt=\"minus icon\" onClick={e => { onArmyUnitBtnClick(e, unit, false) }} className=\"cursor-pointer unit-number-icon\" />\n                            <input type=\"text\" value={unit.units_recruited} placeholder={unit.units_recruited.toString()} onChange={e => {onArmyUnitNumberChange(e, unit)}} />\n                            <img src={process.env.PUBLIC_URL + '/static/plus.ico'} alt=\"plus icon\" onClick={e => { onArmyUnitBtnClick(e, unit, true)} } className=\"cursor-pointer unit-number-icon\" />\n                        </div>\n                    ))}\n                </div>\n                {/* Navy units */}\n                <div className=\"flex flex-col\">\n                    <h1>Navy</h1>\n                    {navy.map((unit: NavyUnit) => (\n                        <div key={unit.name} className=\"flex flex-wrap\">\n                            <h2>{unit.name}</h2>\n                            <div>\n                                price: {Math.ceil(unit.recruitment_cost * unit.units_recruited)} <br />\n                                upkeep: {Math.ceil(unit.upkeep_cost * unit.units_recruited)}\n                            </div>\n                            <img src={process.env.PUBLIC_URL + '/static/minus.ico'} alt=\"minus icon\" onClick={e => { onNavyUnitBtnClick(e, unit, false) }} className=\"cursor-pointer unit-number-icon\" />\n                            <input type=\"text\" value={unit.units_recruited} placeholder={unit.units_recruited.toString()} onChange={e => { onNavyUnitNumberChange(e, unit) }} />\n                            <img src={process.env.PUBLIC_URL + '/static/plus.ico'} alt=\"plus icon\" onClick={e => { onNavyUnitBtnClick(e, unit, true) }} className=\"cursor-pointer unit-number-icon\" />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Units\n","/home/niemand/Python/massiliarp/frontend/src/components/Login.tsx",[],"/home/niemand/Python/massiliarp/frontend/src/components/Navbar.tsx",["56","57"],"import React, { FC, useState, useEffect } from 'react'\nimport { Link, Redirect } from 'react-router-dom'\nimport Cookies from 'universal-cookie/es6'\nimport { BACKEND_URL } from '../App'\n\ninterface Props {\n    exclude: string\n    cookies: Cookies\n    setIsAuthenticated: Function\n}\n\n// Capitilize the first letter of each word in a string\nconst capitilize = (s: string) => {\n    const arr = s.split(' ')\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1)\n    }\n\n    return arr.join(' ')\n}\n\nconst Navbar: FC<Props> = ({ exclude, cookies, setIsAuthenticated }) => {\n    // State\n    const [settings, setSettings] = useState(['home', 'units', 'buildings', 'population', 'events'])\n    const [dropdown, setDropdown] = useState(false)\n    const [isLoggedOut, setIsLoggedOut] = useState(false)\n\n    useEffect(() => {\n        // Remove the exclude item from the settings array\n        setSettings(settings.filter(item => {\n            if (item !== exclude) {\n                return item\n            }\n        }))\n    }, [])\n\n    const onSettingsClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        setDropdown(!dropdown);\n    }\n\n    const endTurnClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        console.log('end turn')\n    }\n\n    const isResponseOk = (response: any) => {\n        if (response.status >= 200 && response.status <= 299) {\n            return response.json()\n        } else {\n            throw Error(response.statusText)\n        }\n    }\n\n    const onLogoutSubmit = (event: React.MouseEvent<HTMLAnchorElement>) => {\n        event.preventDefault()\n        fetch(BACKEND_URL + '/api-auth/logout/', {\n            headers: {\n                'Content-Type': 'application/json',\n                'X-CSRFToken': cookies.get('csrftoken'),\n            },\n            credentials: 'same-origin',\n        })\n        .then(res => isResponseOk(res))\n        .then(data => {\n            console.log(data)  // -2\n            setIsAuthenticated(false)\n            setIsLoggedOut(true)\n        })\n        .catch(err => {\n            console.log(err)\n        })\n    }\n\n    return (\n        <ul id=\"navbar\" className=\"top-0 m-0 p-0 pr-2 list-none overflow-hidden bg-blue md:pr-12\">\n            <li className=\"inline float-left\">\n                <img src={process.env.PUBLIC_URL + '/static/massilia-icon.webp'} alt=\"massilia logo\" className=\"inline-block\" /><span className=\"text-xl text-silver font-bold\">MassaliaRP</span>\n            </li>\n            <li className=\"inline float-right mx-1.5 md:mx-4\">\n                <button id=\"end-turn-btn\" className=\"p-1.5 border-2 border-silver rounded text-lg text-silver font-bold hover:opacity-60\" onClick={(e) => {endTurnClick(e)}}>End Turn</button>\n            </li>\n            <li className=\"inline float-right mx-1.5 md:mx-10\">\n                <div className=\"flex flex-col justify-end items-center mt-4 cursor-pointer hover:opacity-40\" onClick={(e) => {onSettingsClick(e)}}>\n                    <img id=\"settings-icon\" src={process.env.PUBLIC_URL + '/static/settings-icon.png'} alt=\"settings icon\" />\n                    <span id=\"settings-clickable\" className=\"m-0 p-0 text-2xl font-bold\">&#8249;</span>\n                </div>\n                { dropdown && \n                    <div id=\"settings-dropdown\">\n                        {settings.map((i) => (\n                            <>\n                                <Link key={i} to={'/' + i} className=\"text-blue font-semibold hover:text-salmon-dark\">{capitilize(i)}</Link><br />\n                            </>\n                        ))}\n                        <Link key={'logout'} to=\"/\" className=\"text-blue font-semibold hover:text-salmon-dark\" onClick={(e) => {onLogoutSubmit(e)}}>Logout</Link>\n                        { isLoggedOut && <Redirect to=\"/\" /> }\n                    </div>\n                }\n            </li>\n        </ul>\n    )\n}\n\nexport default Navbar\n","/home/niemand/Python/massiliarp/frontend/src/components/Population.tsx",["58"],"import React, { FC, useState, useEffect } from 'react'\nimport Cookies from 'universal-cookie/es6'\nimport axios from 'axios'\nimport { BACKEND_URL } from '../App'\n\n// Components\nimport Navbar from './Navbar'\n\ninterface Props {\n    cookies: Cookies\n    setIsAuthenticated: Function\n}\n\ntype CityPopulation = {\n    name: string\n    population: number\n}\n\nconst sortFunction = (a: CityPopulation, b: CityPopulation) => {\n    if (a.name < b.name)\n        return -1\n    else if (a.name > b.name)\n        return 1\n    return 0\n}\n\nconst Population: FC<Props> = ({ cookies, setIsAuthenticated }) => {\n    // State\n    const [cityPops, setCityPops] = useState<CityPopulation[]>([])\n    const [name, setName] = useState('')\n    const [population, setPopulation] = useState<number>()\n\n    const axiosConfig = {\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': cookies.get('csrftoken'),\n        },\n        withCredentials: true,\n    }\n\n    useEffect(() => {\n        // Get the cities' populations from the backend API\n        axios.get<CityPopulation[]>(BACKEND_URL + '/api/city-population/', axiosConfig)\n        .then(response => {\n            setCityPops(response.data.sort(sortFunction))\n        })\n    }, [])\n\n    const onPopulationChange = (event: React.ChangeEvent<HTMLInputElement>, cityName: string) => {\n        event.preventDefault()\n\n        // Check the validity of the new given input\n        const newValue = event.target.value\n        if (typeof newValue === 'string' && !isNaN(Number(newValue)) && newValue !== '') {\n            // Make a shallow copy of the city pops array\n            let popsCopy = [...cityPops]\n\n            // Change the value of the pop in question\n            let cityCopy = popsCopy.find(c => c.name === cityName)\n            if (cityCopy !== undefined) {\n                const index = popsCopy.indexOf(cityCopy)\n                cityCopy.population = parseInt(newValue, 10)\n                popsCopy[index] = cityCopy\n                setCityPops(popsCopy)\n\n                // Let the backend know about the change\n                axios.put(BACKEND_URL + '/api/city-population/' + cityName + '/', cityCopy, axiosConfig)\n            }\n        }\n    }\n\n    const onNewCitySubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n\n        // Create new CityPopulation object\n        const newCity: CityPopulation = {\n            name: name,\n            population: population !== undefined ? population : 0\n        }\n\n        // Send the new data to the server\n        const searchCity = cityPops.find(c => c.name === name)\n        if (searchCity !== undefined) {\n            axios.put(BACKEND_URL + '/api/city-population/' + name + '/', newCity, axiosConfig)\n            searchCity.population = population as number\n            setCityPops(cityPops)\n\n        } else {\n            axios.post(BACKEND_URL + '/api/city-population/', newCity, axiosConfig)\n            setCityPops([...cityPops, newCity].sort(sortFunction))\n        }\n\n        // Clear the fields\n        setName('')\n        setPopulation(undefined)\n    }\n\n    const onPopChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault()\n\n        // Make sure a number was inputted\n        const newPop = event.target.value\n        if (typeof newPop === 'string' && !isNaN(Number(newPop)) && newPop !== '') {\n            setPopulation(parseInt(newPop, 10))\n        }\n    }\n\n    return (\n        <>\n            <Navbar exclude={'population'} cookies={cookies} setIsAuthenticated={setIsAuthenticated} />\n            <div className=\"flex flex-row flex-wrap-reverse\">\n                <div className=\"flex flex-col\">\n                    <h1><u>City Population</u></h1>\n                    {cityPops.map((city: CityPopulation) => (\n                        <div key={city.name} className=\"flex flex-wrap\">\n                            <h2>{city.name}</h2>\n                            <input type=\"text\" value={city.population} onChange={e => { onPopulationChange(e, city.name) }} />\n                        </div>\n                    ))}\n                </div>\n                <form className=\"flex flex-col\" onSubmit={e => onNewCitySubmit(e)}>\n                    <h1><u>New City</u></h1>\n                    <div className=\"felx flex-row flex-wrap\">\n                        <label htmlFor=\"name\">Name:</label>\n                        <input type=\"text\" value={name} id=\"name\" onChange={e => { e.preventDefault(); setName(e.target.value) }} />\n                    </div>\n                    <div className=\"felx flex-row flex-wrap\">\n                        <label htmlFor=\"population\">Population:</label>\n                        <input type=\"number\" value={population} id=\"population\" onChange={e => { onPopChange(e) }} />\n                    </div>\n                    <input type=\"submit\" value=\"Create\" className=\"cursor-pointer\" />\n                </form>\n            </div>\n        </>\n    )\n}\n\nexport default Population\n","/home/niemand/Python/massiliarp/frontend/src/components/Events.tsx",["59","60"],"import React, { FC, useState, useEffect } from 'react'\nimport Cookies from 'universal-cookie/es6'\nimport axios from 'axios'\nimport { BACKEND_URL } from '../App'\n\n// Components\nimport Navbar from './Navbar'\n\ninterface Props {\n    cookies: Cookies\n    setIsAuthenticated: Function\n}\n\ntype UniqueEvent = {\n    name: string\n    event_type: string\n    talents: number\n    year: number\n    expired: boolean\n    balance_sheet: number\n}\n\nconst Events: FC<Props> =  ({ cookies, setIsAuthenticated }) => {\n    // State\n    const [events, setEvents] = useState<UniqueEvent[]>([])\n    const [displayYear, setDisplayYear] = useState(0)\n    const [name, setName] = useState('')\n    const [talents, setTalents] = useState<number>()\n    const [isIncome, setIsIncome] = useState(true)  // False value indicates an expense\n    const [year, setYear] = useState<number>()\n\n    const axiosConfig = {\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': cookies.get('csrftoken'),\n        },\n        withCredentails: true,\n    }\n\n    useEffect(() => {\n        // Download the events from the backend API\n        axios.get<UniqueEvent[]>(BACKEND_URL + '/api/unique-event/', axiosConfig)\n        .then(response => {\n            setEvents(response.data)\n\n            // Display the latest turn's events\n            const years = response.data.map(e => e.year)\n            setDisplayYear(Math.max(...years))\n        })\n    }, [])\n\n    const handleNewEventSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n\n        if (name !== '' && talents !== undefined && year !== undefined) {\n            // Create a new unique event\n            const newEvent: UniqueEvent = {\n                name: name,\n                event_type: isIncome ? 'I' : 'E',\n                talents: talents as number,\n                year: year as number,\n                expired: false,\n                balance_sheet: year as number,\n            }\n\n            // Find whether the item already exists\n            const names = events.map(i => i.name)\n            const years = events.map(i => i.balance_sheet)\n            if (names.includes(name) && years.includes(year)) {\n                // Put HTTP request\n                const index = names.indexOf(name) + 1\n                axios.put(BACKEND_URL + '/api/unique-event/' + index + '/', newEvent, axiosConfig)\n\n                // Alter the event already present in the events array\n                const eventsCopy = [...events]\n                eventsCopy.splice(index - 1, 1, newEvent)\n                setEvents(eventsCopy)\n\n            } else {\n                axios.post(BACKEND_URL + '/api/unique-event/', newEvent, axiosConfig)\n\n                setEvents([...events, newEvent])\n            }\n\n            // Reset input fields\n            setName('')\n            setTalents(undefined)\n            setIsIncome(true)\n            setYear(undefined)\n        }\n    }\n\n    const onTalentsChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault()\n        setTalents(Math.abs(parseInt(event.target.value, 10)))\n    }\n\n    const onYearChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault()\n\n        // A valid year must be inputted\n        const givenYear = parseInt(event.target.value, 10)\n\n        // Get all the years from the balance sheets\n        axios.get(BACKEND_URL + '/api/balance-sheet/', axiosConfig)\n        .then(response => {\n            let years: number[] = []\n            response.data.forEach((element: any) => {\n                years.push(element.year)\n            })\n\n            return years\n        })\n        .then (years => {\n            // Make sure a balance sheet exists for the given year\n            if (years.includes(givenYear)) {\n                setYear(givenYear)\n                console.log()\n            }\n        })\n    }\n\n    const handleTypeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setIsIncome(event.target.value === 'Income')\n    }\n\n    return (\n        <>\n            <Navbar exclude={'events'} cookies={cookies} setIsAuthenticated={setIsAuthenticated} />\n            <div className=\"flex flex-row flex-wrap-reverse\">\n                <div className=\"flex flex-col\">\n                    <h1><u>Events - Turn {displayYear}</u></h1>\n                    {events.map(uniqueEvent => {\n                        if (uniqueEvent.year === displayYear) {\n                            return (\n                                <div className=\"flex flex-row flex wrap\">\n                                    <h2>{uniqueEvent.name}</h2>\n                                    <span>{uniqueEvent.event_type === 'I' ? '+' : '-'}{uniqueEvent.talents}</span>\n                                </div>\n                            )\n                        }\n                    })}\n                </div>\n                <form className=\"flex flex-col\" onSubmit={e => { handleNewEventSubmit(e) }}>\n                    <h1><u>New Event</u></h1>\n                    <div className=\"flex flex-row flex-wrap\">\n                        <label htmlFor=\"name\">Name:</label>\n                        <input type=\"text\" id=\"name\" value={name} onChange={e => {\n                            e.preventDefault()\n                            setName(e.target.value)\n                        }} />\n                    </div>\n                    <div className=\"flex flex-row flex-wrap\">\n                        <label htmlFor=\"talents\">Talents:</label>\n                        <input type=\"number\" id=\"talents\" value={talents} onChange={e => { onTalentsChange(e) }} />\n                    </div>\n                    <div className=\"flex flex-row flex-wrap\">\n                        <label htmlFor=\"year\">Year:</label>\n                        <input type=\"number\" id=\"year\" value={year} onChange={e => { onYearChange(e) }} />\n                    </div>\n                    <div className=\"flex flex-col\">\n                        <label htmlFor=\"type\">Type</label>\n                        <div>\n                            <label htmlFor=\"income\">Income</label>\n                            <input type=\"radio\" id=\"income\" value=\"Income\" checked={isIncome} onChange={e => handleTypeChange(e)} />\n                        </div>\n                        <div>\n                            <label htmlFor=\"expense\">Expense</label>\n                            <input type=\"radio\" id=\"expense\" value=\"Expense\" checked={!isIncome} onChange={e => handleTypeChange(e)} />\n                        </div>\n                    </div>\n                    <input type=\"submit\" value=\"Create\" className=\"cursor-pointer\" />\n                </form>\n            </div>\n        </>\n    )\n}\n\nexport default Events\n","/home/niemand/Python/massiliarp/frontend/src/components/Buildings.tsx",["61"],"import React, { FC, useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Cookies from 'universal-cookie/es6'\nimport { BACKEND_URL } from '../App'\n\n// Components\nimport Navbar from './Navbar'\n\ninterface Props {\n    cookies: Cookies\n    setIsAuthenticated: Function\n}\n\ninterface Building {\n    name: string\n    construction_cost: number\n    number_built: number\n    settings?: number\n}\n\ninterface ProfitableBuilding extends Building {\n    building_income: number\n}\n\ninterface MaintainableBuilding extends Building {\n    building_maintenance: number\n}\n\nconst Buildings: FC<Props> = ({ cookies, setIsAuthenticated }) => {\n    // State\n    const [buildings, setBuildings] = useState<Building[]>([])\n    const [name, setName] = useState('')\n    const [cost, setCost] = useState<number>()\n    const [isProfitable, setIsProfitable] = useState(true)  // false => new Building is maintainable\n    const [talents, setTalents] = useState<number>()\n\n    const axiosConfig = {\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': cookies.get('csrftoken'),\n        },\n        withCredentials: true,\n    }\n\n    useEffect(() => {\n        downloadBuildings()\n    }, [])\n\n    const instanceOfProfitable = (object:any): object is Building => ('building_income' in object)\n    \n    const downloadBuildings = () => {\n        // Download the existing buildings\n        // Profitable buildings first\n        axios.get<ProfitableBuilding[]>(BACKEND_URL + '/api/profitable-building/', axiosConfig)\n        .then(response => response.data)\n        .then((data: ProfitableBuilding[]) => {\n            // Maintainanble buildings\n            axios.get<MaintainableBuilding[]>(BACKEND_URL + '/api/maintainable-building/', axiosConfig)\n            .then(response => {\n                setBuildings([...data, ...response.data])\n            })\n        })\n    }\n\n    // Type: true => profitable building, false => maintainnable building\n    const handleNumberChange = (event: React.ChangeEvent<HTMLInputElement>, buildingName: string, type: boolean) => {\n        event.preventDefault()\n\n        const value = parseInt(event.target.value, 10)\n        if (value >= 0) {\n            // Change the item's value\n            const buildingsCopy = [...buildings]  // Shallow copy\n            let building = buildings.find(b => buildingName === b.name)\n            if (building !== undefined) {\n                building.number_built = Math.abs(parseInt(event.target.value, 10))\n                setBuildings(buildingsCopy)\n\n                // Send new data to the backend server\n                // Profitable building\n                if (type) {\n                    axios.put(BACKEND_URL + '/api/profitable-building/' + buildingName + '/', building as ProfitableBuilding, axiosConfig)\n                } else {  // Maintainnanble building\n                    axios.put(BACKEND_URL + '/api/maintainable-building/' + buildingName + '/', building as MaintainableBuilding, axiosConfig)\n                }\n            }\n        }\n    }\n\n    const handleNewBuildingSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n\n        // Check input validity\n        if (name !== '' && cost !== undefined && talents !== undefined) {\n            // Check whether the build exists already\n            const names =  buildings.map(b => b.name)\n            const exists = names.includes(name)\n\n            // Create appropriate building\n            if (isProfitable) {\n                const newBuilding: ProfitableBuilding = {\n                    name: name,\n                    construction_cost: cost,\n                    number_built: 0,\n                    building_income: talents,\n                    settings: 1\n                }\n\n                if (exists) {\n                    axios.put(BACKEND_URL + '/api/profitable-building/' + name + '/', newBuilding, axiosConfig)\n\n                    // Replace the building already present in the buildings array with its newer version\n                    const index = names.indexOf(name)\n                    const buildingsCopy = [...buildings]\n                    buildingsCopy.splice(index, 1, newBuilding)\n                    setBuildings(buildingsCopy)\n                    \n                } else {\n                    axios.post(BACKEND_URL + '/api/profitable-building/', newBuilding, axiosConfig)\n                    setBuildings([...buildings, newBuilding])\n                }\n            } else {\n                const newBuilding: MaintainableBuilding = {\n                    name: name,\n                    construction_cost: cost,\n                    number_built: 0,\n                    building_maintenance: talents,\n                    settings: 1\n                }\n\n                if (exists) {\n                    axios.put(BACKEND_URL + '/api/maintainable-building/' + name + '/', newBuilding, axiosConfig)\n\n                    // Same as the above 'exists' section\n                    const index = names.indexOf(name)\n                    const buildingsCopy = [...buildings]\n                    buildingsCopy.splice(index, 1, newBuilding)\n                    setBuildings(buildingsCopy)\n\n                } else {\n                    axios.post(BACKEND_URL + '/api/maintainable-building/', newBuilding, axiosConfig)\n                    setBuildings([...buildings, newBuilding])\n                }\n            }\n\n            // Reset input values\n            setName('')\n            setCost(undefined)\n            setIsProfitable(true)\n            setTalents(undefined)\n        }\n    }\n\n    const handleProfitableChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setIsProfitable(event.target.value === 'profitable')\n    }\n\n    const handleTalentsChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value\n        if (typeof value === 'string' && !isNaN(Number(value)) && value !== '') {\n            setTalents(Math.abs(parseFloat(value)))\n        }\n    }\n\n    return (\n        <>\n            <Navbar exclude='buildings' cookies={cookies} setIsAuthenticated={setIsAuthenticated} />\n            <div className=\"flex flex-wrap-reverse\">\n                <div className=\"flex flex-col\">\n                    <h2><u>Buildings</u></h2>\n                    {buildings.map(building => (\n                        <div className=\"flex flex-row flex-wrap\">\n                            <h3>{building.name}</h3>\n                            <span>Construction cost: {building.construction_cost}</span>\n                            { instanceOfProfitable(building) &&\n                                <span>Income: {(building as ProfitableBuilding).building_income} talents</span>\n                            }\n                            { !instanceOfProfitable(building) &&\n                                <span>Maintenance: {(building as MaintainableBuilding).building_maintenance} talents</span>\n                            }\n                            <input type=\"number\" value={building.number_built} onChange={e => { handleNumberChange(e, building.name, instanceOfProfitable(building)) }} />\n                        </div>\n                    ))}\n                </div>\n                <form className=\"flex flex-col\" onSubmit={e => { handleNewBuildingSubmit(e) }}>\n                    <div>\n                        <label htmlFor=\"name\">Name</label>\n                        <input type=\"text\" id=\"name\" value={name} onChange={e => { setName(e.target.value) }} />\n                    </div>\n                    <div>\n                        <label htmlFor=\"cost\">Cost:</label>\n                        <input type=\"number\" id=\"cost\" value={cost} onChange={e => { setCost(Math.abs(parseInt(e.target.value, 10))) }} />\n                    </div>\n                    <div>\n                        <label htmlFor=\"profitable\">Profit</label>\n                        <input type=\"radio\" id=\"profitable\" value=\"profitable\" checked={isProfitable} onChange={e => { handleProfitableChange(e) }} />\n                    </div>\n                    <div>\n                        <label htmlFor=\"maintainable\">Maintainable</label>\n                        <input type=\"radio\" id=\"maintainable\" value=\"maintainable\" checked={!isProfitable} onChange={e => { handleProfitableChange(e) }} />\n                    </div>\n                    <div>\n                        <label htmlFor=\"talents\">Talents:</label>\n                        <input type=\"number\" id=\"talents\" value={talents} onChange={e => { handleTalentsChange(e) }} />\n                    </div>\n                    <input type=\"submit\" value=\"Create\" className=\"cursor-pointer\" />\n                </form>\n            </div>\n        </>\n    )\n}\n\nexport default Buildings\n","/home/niemand/Python/massiliarp/frontend/src/components/BalanceSheetPresenter.tsx",["62","63"],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":19,"column":10,"nodeType":"70","messageId":"71","endLine":19,"endColumn":25},{"ruleId":"72","severity":1,"message":"73","line":53,"column":8,"nodeType":"74","endLine":53,"endColumn":10,"suggestions":"75"},{"ruleId":"72","severity":1,"message":"73","line":49,"column":8,"nodeType":"74","endLine":49,"endColumn":10,"suggestions":"76"},{"ruleId":"72","severity":1,"message":"73","line":58,"column":8,"nodeType":"74","endLine":58,"endColumn":10,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":30,"column":42,"nodeType":"80","messageId":"81","endLine":30,"endColumn":44},{"ruleId":"72","severity":1,"message":"82","line":35,"column":8,"nodeType":"74","endLine":35,"endColumn":10,"suggestions":"83"},{"ruleId":"72","severity":1,"message":"73","line":47,"column":8,"nodeType":"74","endLine":47,"endColumn":10,"suggestions":"84"},{"ruleId":"72","severity":1,"message":"73","line":50,"column":8,"nodeType":"74","endLine":50,"endColumn":10,"suggestions":"85"},{"ruleId":"78","severity":1,"message":"86","line":133,"column":45,"nodeType":"80","messageId":"81","endLine":133,"endColumn":47},{"ruleId":"72","severity":1,"message":"87","line":47,"column":8,"nodeType":"74","endLine":47,"endColumn":10,"suggestions":"88"},{"ruleId":"68","severity":1,"message":"89","line":28,"column":24,"nodeType":"70","messageId":"71","endLine":28,"endColumn":39},{"ruleId":"72","severity":1,"message":"90","line":63,"column":6,"nodeType":"74","endLine":63,"endColumn":8,"suggestions":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"@typescript-eslint/no-unused-vars","'isAuthenticated' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'axiosConfig'. Either include it or remove the dependency array.","ArrayExpression",["94"],["95"],["96"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'exclude' and 'settings'. Either include them or remove the dependency array. You can also do a functional update 'setSettings(s => ...)' if you only need 'settings' in the 'setSettings' call.",["97"],["98"],["99"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","React Hook useEffect has a missing dependency: 'downloadBuildings'. Either include it or remove the dependency array.",["100"],"'setBalanceSheet' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'axiosConfig', 'sheet.total_expenses', 'sheet.total_income', and 'sheet.year'. Either include them or remove the dependency array. If 'setDifference' needs the current value of 'sheet.total_income', you can also switch to useReducer instead of useState and read 'sheet.total_income' in the reducer.",["101"],"no-global-assign","no-unsafe-negation",{"desc":"102","fix":"103"},{"desc":"102","fix":"104"},{"desc":"102","fix":"105"},{"desc":"106","fix":"107"},{"desc":"102","fix":"108"},{"desc":"102","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},"Update the dependencies array to be: [axiosConfig]",{"range":"114","text":"115"},{"range":"116","text":"115"},{"range":"117","text":"115"},"Update the dependencies array to be: [exclude, settings]",{"range":"118","text":"119"},{"range":"120","text":"115"},{"range":"121","text":"115"},"Update the dependencies array to be: [downloadBuildings]",{"range":"122","text":"123"},"Update the dependencies array to be: [axiosConfig, sheet.total_expenses, sheet.total_income, sheet.year]",{"range":"124","text":"125"},[1333,1335],"[axiosConfig]",[1100,1102],[1313,1315],[1069,1071],"[exclude, settings]",[1239,1241],[1440,1442],[1204,1206],"[downloadBuildings]",[1943,1945],"[axiosConfig, sheet.total_expenses, sheet.total_income, sheet.year]"]