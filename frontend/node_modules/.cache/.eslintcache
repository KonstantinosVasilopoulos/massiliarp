[{"/home/niemand/Python/massiliarp/frontend/src/index.tsx":"1","/home/niemand/Python/massiliarp/frontend/src/App.tsx":"2","/home/niemand/Python/massiliarp/frontend/src/components/Home.tsx":"3","/home/niemand/Python/massiliarp/frontend/src/components/Units.tsx":"4","/home/niemand/Python/massiliarp/frontend/src/components/Login.tsx":"5","/home/niemand/Python/massiliarp/frontend/src/components/Navbar.tsx":"6","/home/niemand/Python/massiliarp/frontend/src/components/Population.tsx":"7"},{"size":228,"mtime":1633624901725,"results":"8","hashOfConfig":"9"},{"size":1553,"mtime":1634068600499,"results":"10","hashOfConfig":"9"},{"size":544,"mtime":1633873860329,"results":"11","hashOfConfig":"9"},{"size":8585,"mtime":1633905489635,"results":"12","hashOfConfig":"9"},{"size":2386,"mtime":1634068982861,"results":"13","hashOfConfig":"9"},{"size":3681,"mtime":1634052261053,"results":"14","hashOfConfig":"9"},{"size":4952,"mtime":1634067997345,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"118hqpj",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/home/niemand/Python/massiliarp/frontend/src/index.tsx",[],["35","36"],"/home/niemand/Python/massiliarp/frontend/src/App.tsx",["37"],"import { useState, useEffect } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport Cookies from 'universal-cookie/es6'\n\n// Components\nimport Login from './components/Login'\nimport Home from './components/Home'\nimport Units from './components/Units'\nimport Population from './components/Population'\n\nexport const BACKEND_URL = 'http://localhost:8000'\n\nconst cookies = new Cookies()\n\nconst App = () => {\n  //State\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n\n  useEffect(() => {\n    getSession()\n  })\n\n  const getSession = () => {\n    fetch(BACKEND_URL + '/api-auth/session/', {\n      credentials: 'same-origin',\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(data.isAuthenticated)  // -2\n      if (data.isAuthenticated) {\n        setIsAuthenticated(true)\n      } else {\n        setIsAuthenticated(false)\n      }\n    })\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" render={() => (\n        <Login cookies={cookies} />\n      )} exact />\n      <Route path=\"/home\" render={() => (\n        <Home cookies={cookies} setIsAuthenticated={(auth: boolean) => {setIsAuthenticated(auth)}} />\n      )} exact />\n      <Route path=\"/units\" render={() => (\n        <Units cookies={cookies} setIsAuthenticated={(auth: boolean) => {setIsAuthenticated(auth)}} />\n      )} exact />\n      <Route path=\"/population\" render={() => (\n        <Population cookies={cookies} setIsAuthenticated={(auth: boolean) => {setIsAuthenticated(auth)}} />\n      )} exact />\n    </Switch>\n  )\n}\n\nexport default App\n","/home/niemand/Python/massiliarp/frontend/src/components/Home.tsx",["38","39"],"import { FC, useState } from 'react'\nimport Cookies from 'universal-cookie/es6'\n\n// Components\nimport Navbar from './Navbar'\n\ninterface Props {\n    cookies: Cookies\n    setIsAuthenticated: Function\n}\n\nconst Home:FC<Props> = ({ cookies, setIsAuthenticated }) => {\n    // State\n    const [balanceSheets, setBalanceSheets] = useState<string[]>([])\n\n    return (\n        <>\n            <Navbar initSettings={['units', 'buidlings', 'population']} cookies={cookies} setIsAuthenticated={setIsAuthenticated} />\n        </>\n    )\n}\n\nexport default Home\n","/home/niemand/Python/massiliarp/frontend/src/components/Units.tsx",["40","41"],"import React, { FC, useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Cookies from 'universal-cookie/es6'\nimport { BACKEND_URL } from '../App'\n\n// Components\nimport Navbar from './Navbar'\n\ninterface Props {\n    cookies: Cookies\n    setIsAuthenticated: Function\n}\n\ninterface Unit {\n    name: string\n    recruitment_cost: number\n    upkeep_cost: number\n    units_recruited: number\n    settings: number\n}\n\ninterface ArmyUnit extends Unit {\n    raised: boolean\n}\n\ninterface NavyUnit extends Unit {\n\n}\n\nconst Units: FC<Props> = ({ cookies, setIsAuthenticated }) => {\n    // State\n    const [army, setArmy] = useState<ArmyUnit[]>([])\n    const [navy, setNavy] = useState<NavyUnit[]>([])\n\n    const axiosConfig = {\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': cookies.get('csrftoken'),\n        },\n        withCredentials: true,\n    }\n\n    // Get the army units\n    useEffect(() => {\n        axios.get<ArmyUnit[]>(BACKEND_URL + '/api/army-unit', axiosConfig)\n        .then(response => {\n            setArmy(response.data)\n        })\n    }, [])\n\n\n    // Get the navy's ships\n    useEffect(() => {\n        axios.get<NavyUnit[]>(BACKEND_URL + '/api/navy-unit', axiosConfig)\n        .then(response => {\n            setNavy(response.data)\n        })\n    }, [])\n\n    const isResponseOk = (response: any) => {\n        if (response.status < 200 && response.status > 299) {\n            throw Error(response.statusText)\n        }\n        return true\n    }\n\n    const handleRaisedChange = (event: React.MouseEvent<HTMLInputElement>, unit: ArmyUnit) => {\n        unit.raised = !unit.raised\n\n        // Make a shallow copy of the army list\n        let armyCopy = [...army]\n\n        // Find the relevant unit\n        let unitCopy = armyCopy.find(u => u.name === unit.name)\n        if (unitCopy !== undefined) {\n            // Alter the unit\n            const index = armyCopy.indexOf(unitCopy)\n            unitCopy.raised = unit.raised\n            armyCopy[index] = unitCopy\n            setArmy(armyCopy)\n        }\n        \n        // Put data to backend server\n        axios.put(BACKEND_URL + '/api/army-unit/' + unit.name + '/', unit, axiosConfig)\n        .then(resp => isResponseOk(resp))\n    }\n\n    const onArmyUnitBtnClick = (event: React.MouseEvent<HTMLImageElement>, unit: ArmyUnit, isAddition: boolean) => {\n        event.preventDefault()\n\n        // Make a shallow copy of the army list\n        let armyCopy = [...army]\n\n        // Find the relevant unit\n        let unitCopy = armyCopy.find(u => u.name === unit.name)\n        if (unitCopy !== undefined) {\n            // Alter the unit\n            const index = armyCopy.indexOf(unitCopy)\n            unitCopy.units_recruited += isAddition ? 1 : -1\n            armyCopy[index] = unitCopy\n            setArmy(armyCopy)\n        }\n\n        // Inform the backend server about the changes\n        axios.put(BACKEND_URL + '/api/army-unit/' + unit.name + '/', unit, axiosConfig)\n        .then(resp => isResponseOk(resp))\n    }\n\n    const onNavyUnitBtnClick = (event: React.MouseEvent<HTMLImageElement>, unit: NavyUnit, isAddition: boolean) => {\n        event.preventDefault()\n\n        // Same process as the for the army\n        // Check the function above\n        let navyCopy = [...navy]\n        let unitCopy = navyCopy.find(u => u.name === unit.name)\n        if (unitCopy !== undefined) {\n            const index = navyCopy.indexOf(unitCopy)\n            unitCopy.units_recruited += isAddition ? 1 : -1\n            navyCopy[index] = unitCopy\n            setNavy(navyCopy)\n        }\n\n        axios.put(BACKEND_URL + '/api/navy-unit/' + unit.name + '/', unit, axiosConfig)\n        .then(resp => isResponseOk(resp))\n    }\n\n    const onArmyUnitNumberChange = (event: React.ChangeEvent<HTMLInputElement>, unit: ArmyUnit) => {\n        event.preventDefault()\n\n        // Make sure the given value can be safely parsed to number\n        const newValue = event.target.value\n        if (typeof newValue === 'string' && !isNaN(Number(newValue)) && newValue !== '') {\n            unit.units_recruited = parseInt(newValue)\n\n            // Shallow copy\n            let armyCopy = [...army]\n\n            // Find the unit in question\n            let unitCopy = armyCopy.find(u => u.name === unit.name)\n            if (unitCopy !== undefined) {\n                const index = armyCopy.indexOf(unitCopy)\n                unitCopy.units_recruited = unit.units_recruited\n                armyCopy[index] = unitCopy\n                setArmy(armyCopy)\n\n                axios.put(BACKEND_URL + '/api/army-unit/' + unitCopy.name + '/', unitCopy, axiosConfig)\n                .then(resp => isResponseOk(resp))\n            }\n        }\n    }\n\n    const onNavyUnitNumberChange = (event: React.ChangeEvent<HTMLInputElement>, unit: NavyUnit) => {\n        event.preventDefault()\n\n        // Make sure the given value can be safely parsed to number\n        const newValue = event.target.value\n        if (typeof newValue === 'string' && !isNaN(Number(newValue)) && newValue !== '') {\n            unit.units_recruited = parseInt(newValue)\n\n            // Shallow copy\n            let navyCopy = [...navy]\n\n            // Find the unit in question\n            let unitCopy = navyCopy.find(u => u.name === unit.name)\n            if (unitCopy !== undefined) {\n                const index = navyCopy.indexOf(unitCopy)\n                unitCopy.units_recruited = unit.units_recruited\n                navyCopy[index] = unitCopy\n                setNavy(navyCopy)\n\n                axios.put(BACKEND_URL + '/api/navy-unit/' + unitCopy.name + '/', unitCopy, axiosConfig)\n                .then(resp => isResponseOk(resp))\n            }\n        }\n    }\n\n    return (\n        <>\n            <Navbar initSettings={['home', 'buildings', 'population']} cookies={cookies} setIsAuthenticated={setIsAuthenticated} />\n            <div className=\"flex flex-wrap justify-around\">\n                {/* Army units */}\n                <div className=\"flex flex-col\">\n                    <h1><u>Army</u></h1>\n                    {army.map((unit: ArmyUnit) => (\n                        <div key={unit.name} className=\"flex flex-wrap\">\n                            <input type=\"checkbox\" className=\"cursor-pointer\" defaultChecked={unit.raised} onClick={e => {handleRaisedChange(e, unit)}} />\n                            <h2>{unit.name}</h2>\n                            <div>\n                                price: {Math.ceil(unit.recruitment_cost * unit.units_recruited)} <br />\n                                upkeep: {unit.raised ? Math.ceil(unit.upkeep_cost * unit.units_recruited) : 0}\n                            </div>\n                            <img src={process.env.PUBLIC_URL + '/static/minus.ico'} alt=\"minus icon\" onClick={e => { onArmyUnitBtnClick(e, unit, false) }} className=\"cursor-pointer unit-number-icon\" />\n                            <input type=\"text\" value={unit.units_recruited} placeholder={unit.units_recruited.toString()} onChange={e => {onArmyUnitNumberChange(e, unit)}} />\n                            <img src={process.env.PUBLIC_URL + '/static/plus.ico'} alt=\"plus icon\" onClick={e => { onArmyUnitBtnClick(e, unit, true)} } className=\"cursor-pointer unit-number-icon\" />\n                        </div>\n                    ))}\n                </div>\n                {/* Navy units */}\n                <div className=\"flex flex-col\">\n                    <h1>Navy</h1>\n                    {navy.map((unit: NavyUnit) => (\n                        <div key={unit.name} className=\"flex flex-wrap\">\n                            <h2>{unit.name}</h2>\n                            <div>\n                                price: {Math.ceil(unit.recruitment_cost * unit.units_recruited)} <br />\n                                upkeep: {Math.ceil(unit.upkeep_cost * unit.units_recruited)}\n                            </div>\n                            <img src={process.env.PUBLIC_URL + '/static/minus.ico'} alt=\"minus icon\" onClick={e => { onNavyUnitBtnClick(e, unit, false) }} className=\"cursor-pointer unit-number-icon\" />\n                            <input type=\"text\" value={unit.units_recruited} placeholder={unit.units_recruited.toString()} onChange={e => { onNavyUnitNumberChange(e, unit) }} />\n                            <img src={process.env.PUBLIC_URL + '/static/plus.ico'} alt=\"plus icon\" onClick={e => { onNavyUnitBtnClick(e, unit, true) }} className=\"cursor-pointer unit-number-icon\" />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Units\n","/home/niemand/Python/massiliarp/frontend/src/components/Login.tsx",[],"/home/niemand/Python/massiliarp/frontend/src/components/Navbar.tsx",[],"/home/niemand/Python/massiliarp/frontend/src/components/Population.tsx",["42"],"import React, { FC, useState, useEffect } from 'react'\nimport Cookies from 'universal-cookie/es6'\nimport axios from 'axios'\nimport { BACKEND_URL } from '../App'\n\n// Components\nimport Navbar from './Navbar'\n\ninterface Props {\n    cookies: Cookies\n    setIsAuthenticated: Function\n}\n\ntype CityPopulation = {\n    name: string\n    population: number\n}\n\nconst sortFunction = (a: CityPopulation, b: CityPopulation) => {\n    if (a.name < b.name)\n        return -1\n    else if (a.name > b.name)\n        return 1\n    return 0\n}\n\nconst Population: FC<Props> = ({ cookies, setIsAuthenticated }) => {\n    // State\n    const [cityPops, setCityPops] = useState<CityPopulation[]>([])\n    const [name, setName] = useState('')\n    const [population, setPopulation] = useState<number>()\n\n    const axiosConfig = {\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': cookies.get('csrftoken'),\n        },\n        withCredentials: true,\n    }\n\n    useEffect(() => {\n        // Get the cities' populations from the backend API\n        axios.get<CityPopulation[]>(BACKEND_URL + '/api/city-population/', axiosConfig)\n        .then(response => {\n            setCityPops(response.data.sort(sortFunction))\n        })\n    }, [])\n\n    const onPopulationChange = (event: React.ChangeEvent<HTMLInputElement>, cityName: string) => {\n        event.preventDefault()\n\n        // Check the validity of the new given input\n        const newValue = event.target.value\n        if (typeof newValue === 'string' && !isNaN(Number(newValue)) && newValue !== '') {\n            // Make a shallow copy of the city pops array\n            let popsCopy = [...cityPops]\n\n            // Change the value of the pop in question\n            let cityCopy = popsCopy.find(c => c.name === cityName)\n            if (cityCopy !== undefined) {\n                const index = popsCopy.indexOf(cityCopy)\n                cityCopy.population = parseInt(newValue, 10)\n                popsCopy[index] = cityCopy\n                setCityPops(popsCopy)\n\n                // Let the backend know about the change\n                axios.put(BACKEND_URL + '/api/city-population/' + cityName + '/', cityCopy, axiosConfig)\n            }\n        }\n    }\n\n    const onNewCitySubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n\n        // Create new CityPopulation object\n        const newCity: CityPopulation = {\n            name: name,\n            population: population !== undefined ? population : 0\n        }\n\n        // Send the new data to the server\n        const searchCity = cityPops.find(c => c.name === name)\n        if (searchCity !== undefined) {\n            axios.put(BACKEND_URL + '/api/city-population/' + name + '/', newCity, axiosConfig)\n            searchCity.population = population as number\n            setCityPops(cityPops)\n\n        } else {\n            axios.post(BACKEND_URL + '/api/city-population/', newCity, axiosConfig)\n            setCityPops([...cityPops, newCity].sort(sortFunction))\n        }\n\n        // Clear the fields\n        setName('')\n        setPopulation(undefined)\n    }\n\n    const onPopChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault()\n\n        // Make sure a number was inputted\n        const newPop = event.target.value\n        if (typeof newPop === 'string' && !isNaN(Number(newPop)) && newPop !== '') {\n            setPopulation(parseInt(newPop, 10))\n        }\n    }\n\n    return (\n        <>\n            <Navbar initSettings={['home', 'units', 'buildings']} cookies={cookies} setIsAuthenticated={setIsAuthenticated} />\n            <div className=\"flex flex-row flex-wrap-reverse\">\n                <div className=\"flex flex-col\">\n                    <h1><u>City Population</u></h1>\n                    {cityPops.map((city: CityPopulation) => (\n                        <div key={city.name} className=\"flex flex-wrap\">\n                            <h2>{city.name}</h2>\n                            <input type=\"text\" value={city.population} onChange={e => { onPopulationChange(e, city.name) }} />\n                        </div>\n                    ))}\n                </div>\n                <form className=\"flex flex-col\" onSubmit={e => onNewCitySubmit(e)}>\n                    <div className=\"felx flex-row flex-wrap\">\n                        <label htmlFor=\"name\">Name:</label>\n                        <input type=\"text\" value={name} id=\"name\" onChange={e => { e.preventDefault(); setName(e.target.value) }} />\n                    </div>\n                    <div className=\"felx flex-row flex-wrap\">\n                        <label htmlFor=\"population\">Population:</label>\n                        <input type=\"number\" value={population} id=\"population\" onChange={e => { onPopChange(e) }} />\n                    </div>\n                    <input type=\"submit\" value=\"Create\" />\n                </form>\n            </div>\n        </>\n    )\n}\n\nexport default Population\n",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":17,"column":10,"nodeType":"49","messageId":"50","endLine":17,"endColumn":25},{"ruleId":"47","severity":1,"message":"51","line":14,"column":12,"nodeType":"49","messageId":"50","endLine":14,"endColumn":25},{"ruleId":"47","severity":1,"message":"52","line":14,"column":27,"nodeType":"49","messageId":"50","endLine":14,"endColumn":43},{"ruleId":"53","severity":1,"message":"54","line":49,"column":8,"nodeType":"55","endLine":49,"endColumn":10,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"54","line":58,"column":8,"nodeType":"55","endLine":58,"endColumn":10,"suggestions":"57"},{"ruleId":"53","severity":1,"message":"54","line":47,"column":8,"nodeType":"55","endLine":47,"endColumn":10,"suggestions":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"@typescript-eslint/no-unused-vars","'isAuthenticated' is assigned a value but never used.","Identifier","unusedVar","'balanceSheets' is assigned a value but never used.","'setBalanceSheets' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'axiosConfig'. Either include it or remove the dependency array.","ArrayExpression",["61"],["62"],["63"],"no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},{"desc":"64","fix":"66"},{"desc":"64","fix":"67"},"Update the dependencies array to be: [axiosConfig]",{"range":"68","text":"69"},{"range":"70","text":"69"},{"range":"71","text":"69"},[1099,1101],"[axiosConfig]",[1311,1313],[1239,1241]]